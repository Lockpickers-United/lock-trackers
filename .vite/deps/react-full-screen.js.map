{
  "version": 3,
  "sources": ["../../node_modules/fscreen/src/fscreen.js", "../../node_modules/react-full-screen/src/index.tsx"],
  "sourcesContent": ["const key = {\n  fullscreenEnabled: 0,\n  fullscreenElement: 1,\n  requestFullscreen: 2,\n  exitFullscreen: 3,\n  fullscreenchange: 4,\n  fullscreenerror: 5,\n  fullscreen: 6\n};\n\nconst webkit = [\n  'webkitFullscreenEnabled',\n  'webkitFullscreenElement',\n  'webkitRequestFullscreen',\n  'webkitExitFullscreen',\n  'webkitfullscreenchange',\n  'webkitfullscreenerror',\n  '-webkit-full-screen',\n];\n\nconst moz = [\n  'mozFullScreenEnabled',\n  'mozFullScreenElement',\n  'mozRequestFullScreen',\n  'mozCancelFullScreen',\n  'mozfullscreenchange',\n  'mozfullscreenerror',\n  '-moz-full-screen',\n];\n\nconst ms = [\n  'msFullscreenEnabled',\n  'msFullscreenElement',\n  'msRequestFullscreen',\n  'msExitFullscreen',\n  'MSFullscreenChange',\n  'MSFullscreenError',\n  '-ms-fullscreen',\n];\n\n// so it doesn't throw if no window or document\nconst document = typeof window !== 'undefined' && typeof window.document !== 'undefined' ? window.document : {};\n\nconst vendor = (\n  ('fullscreenEnabled' in document && Object.keys(key)) ||\n  (webkit[0] in document && webkit) ||\n  (moz[0] in document && moz) ||\n  (ms[0] in document && ms) ||\n  []\n);\n\nexport default {\n  requestFullscreen: element => element[vendor[key.requestFullscreen]](),\n  requestFullscreenFunction: element => element[vendor[key.requestFullscreen]],\n  get exitFullscreen() { return document[vendor[key.exitFullscreen]].bind(document); },\n  get fullscreenPseudoClass() { return `:${vendor[key.fullscreen]}`; },\n  addEventListener: (type, handler, options) => document.addEventListener(vendor[key[type]], handler, options),\n  removeEventListener: (type, handler, options) => document.removeEventListener(vendor[key[type]], handler, options),\n  get fullscreenEnabled() { return Boolean(document[vendor[key.fullscreenEnabled]]); },\n  set fullscreenEnabled(val) {},\n  get fullscreenElement() { return document[vendor[key.fullscreenElement]]; },\n  set fullscreenElement(val) {},\n  get onfullscreenchange() { return document[`on${vendor[key.fullscreenchange]}`.toLowerCase()]; },\n  set onfullscreenchange(handler) { return document[`on${vendor[key.fullscreenchange]}`.toLowerCase()] = handler; },\n  get onfullscreenerror() { return document[`on${vendor[key.fullscreenerror]}`.toLowerCase()]; },\n  set onfullscreenerror(handler) { return document[`on${vendor[key.fullscreenerror]}`.toLowerCase()] = handler; },\n};\n", "import React, {\n  useCallback,\n  useState,\n  useRef,\n  useEffect,\n  useMemo,\n} from 'react';\nimport fscreen from 'fscreen';\n\nexport interface FullScreenHandle {\n  active: boolean;\n  enter: () => Promise<void>;\n  exit: () => Promise<void>;\n  node: React.MutableRefObject<HTMLDivElement | null>;\n}\n\nexport interface FullScreenProps {\n  handle: FullScreenHandle;\n  children: any;\n  onChange?: (state: boolean, handle: FullScreenHandle) => void;\n  className?: string;\n}\n\nexport function useFullScreenHandle(): FullScreenHandle {\n  const [active, setActive] = useState<boolean>(false);\n  const node = useRef<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    const handleChange = () => {\n      setActive(fscreen.fullscreenElement === node.current);\n    };\n    fscreen.addEventListener('fullscreenchange', handleChange);\n    return () => fscreen.removeEventListener('fullscreenchange', handleChange);\n  }, []);\n\n  const enter = useCallback(() => {\n    if (fscreen.fullscreenElement) {\n      return fscreen.exitFullscreen().then(() => {\n        return fscreen.requestFullscreen(node.current);\n      });\n    } else if (node.current) {\n      return fscreen.requestFullscreen(node.current);\n    }\n  }, []);\n\n  const exit = useCallback(() => {\n    if (fscreen.fullscreenElement === node.current) {\n      return fscreen.exitFullscreen();\n    }\n    return Promise.resolve();\n  }, []);\n\n  return useMemo(\n    () => ({\n      active,\n      enter,\n      exit,\n      node,\n    }),\n    [active, enter, exit],\n  );\n}\n\nexport const FullScreen: React.FC<FullScreenProps> = ({\n  handle,\n  onChange,\n  children,\n  className,\n}) => {\n  const classNames = [];\n  if (className) {\n    classNames.push(className);\n  }\n\n  classNames.push('fullscreen');\n\n  if (handle.active) {\n    classNames.push('fullscreen-enabled');\n  }\n\n  useEffect(() => {\n    if (onChange) {\n      onChange(handle.active, handle);\n    }\n  }, [handle.active]);\n\n  return (\n    <div\n      className={classNames.join(' ')}\n      ref={handle.node}\n      style={handle.active ? { height: '100%', width: '100%' } : undefined}\n    >\n      {children}\n    </div>\n  );\n};\n"],
  "mappings": "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",
  "names": ["useFullScreenHandle", "useState", "active", "setActive", "node", "useRef", "useEffect", "handleChange", "fscreen", "fullscreenElement", "current", "addEventListener", "removeEventListener", "enter", "useCallback", "exitFullscreen", "then", "requestFullscreen", "exit", "Promise", "resolve", "useMemo", "FullScreen", "handle", "onChange", "children", "className", "classNames", "push", "React", "join", "ref", "style", "height", "width", "undefined"]
}
