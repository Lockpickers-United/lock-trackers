{
  "version": 3,
  "sources": ["../../node_modules/fuzzysort/fuzzysort.js"],
  "sourcesContent": ["// https://github.com/farzher/fuzzysort v2.0.4\r\n/*\r\n  SublimeText-like Fuzzy Search\r\n\r\n  fuzzysort.single('fs', 'Fuzzy Search') // {score: -16}\r\n  fuzzysort.single('test', 'test') // {score: 0}\r\n  fuzzysort.single('doesnt exist', 'target') // null\r\n\r\n  fuzzysort.go('mr', [{file:'Monitor.cpp'}, {file:'MeshRenderer.cpp'}], {key:'file'})\r\n  // [{score:-18, obj:{file:'MeshRenderer.cpp'}}, {score:-6009, obj:{file:'Monitor.cpp'}}]\r\n\r\n  fuzzysort.go('mr', ['Monitor.cpp', 'MeshRenderer.cpp'])\r\n  // [{score: -18, target: \"MeshRenderer.cpp\"}, {score: -6009, target: \"Monitor.cpp\"}]\r\n\r\n  fuzzysort.highlight(fuzzysort.single('fs', 'Fuzzy Search'), '<b>', '</b>')\r\n  // <b>F</b>uzzy <b>S</b>earch\r\n*/\r\n\r\n// UMD (Universal Module Definition) for fuzzysort\r\n;((root, UMD) => {\r\n  if(typeof define === 'function' && define.amd) define([], UMD)\r\n  else if(typeof module === 'object' && module.exports) module.exports = UMD()\r\n  else root['fuzzysort'] = UMD()\r\n})(this, _ => {\r\n  'use strict'\r\n\r\n  var single = (search, target) => {                                                                                                                                                                                                                        if(search=='farzher')return{target:\"farzher was here (^-^*)/\",score:0,_indexes:[0]}\r\n    if(!search || !target) return NULL\r\n\r\n    var preparedSearch = getPreparedSearch(search)\r\n    if(!isObj(target)) target = getPrepared(target)\r\n\r\n    var searchBitflags = preparedSearch.bitflags\r\n    if((searchBitflags & target._bitflags) !== searchBitflags) return NULL\r\n\r\n    return algorithm(preparedSearch, target)\r\n  }\r\n\r\n\r\n  var go = (search, targets, options) => {                                                                                                                                                                                                                  if(search=='farzher')return[{target:\"farzher was here (^-^*)/\",score:0,_indexes:[0],obj:targets?targets[0]:NULL}]\r\n    if(!search) return options&&options.all ? all(search, targets, options) : noResults\r\n\r\n    var preparedSearch = getPreparedSearch(search)\r\n    var searchBitflags = preparedSearch.bitflags\r\n    var containsSpace  = preparedSearch.containsSpace\r\n\r\n    var threshold = options&&options.threshold || INT_MIN\r\n    var limit     = options&&options['limit']  || INT_MAX // for some reason only limit breaks when minified\r\n\r\n    var resultsLen = 0; var limitedCount = 0\r\n    var targetsLen = targets.length\r\n\r\n    // This code is copy/pasted 3 times for performance reasons [options.keys, options.key, no keys]\r\n\r\n    // options.key\r\n    if(options && options.key) {\r\n      var key = options.key\r\n      for(var i = 0; i < targetsLen; ++i) { var obj = targets[i]\r\n        var target = getValue(obj, key)\r\n        if(!target) continue\r\n        if(!isObj(target)) target = getPrepared(target)\r\n\r\n        if((searchBitflags & target._bitflags) !== searchBitflags) continue\r\n        var result = algorithm(preparedSearch, target)\r\n        if(result === NULL) continue\r\n        if(result.score < threshold) continue\r\n\r\n        // have to clone result so duplicate targets from different obj can each reference the correct obj\r\n        result = {target:result.target, _targetLower:'', _targetLowerCodes:NULL, _nextBeginningIndexes:NULL, _bitflags:0, score:result.score, _indexes:result._indexes, obj:obj} // hidden\r\n\r\n        if(resultsLen < limit) { q.add(result); ++resultsLen }\r\n        else {\r\n          ++limitedCount\r\n          if(result.score > q.peek().score) q.replaceTop(result)\r\n        }\r\n      }\r\n\r\n    // options.keys\r\n    } else if(options && options.keys) {\r\n      var scoreFn = options['scoreFn'] || defaultScoreFn\r\n      var keys = options.keys\r\n      var keysLen = keys.length\r\n      for(var i = 0; i < targetsLen; ++i) { var obj = targets[i]\r\n        var objResults = new Array(keysLen)\r\n        for (var keyI = 0; keyI < keysLen; ++keyI) {\r\n          var key = keys[keyI]\r\n          var target = getValue(obj, key)\r\n          if(!target) { objResults[keyI] = NULL; continue }\r\n          if(!isObj(target)) target = getPrepared(target)\r\n\r\n          if((searchBitflags & target._bitflags) !== searchBitflags) objResults[keyI] = NULL\r\n          else objResults[keyI] = algorithm(preparedSearch, target)\r\n        }\r\n        objResults.obj = obj // before scoreFn so scoreFn can use it\r\n        var score = scoreFn(objResults)\r\n        if(score === NULL) continue\r\n        if(score < threshold) continue\r\n        objResults.score = score\r\n        if(resultsLen < limit) { q.add(objResults); ++resultsLen }\r\n        else {\r\n          ++limitedCount\r\n          if(score > q.peek().score) q.replaceTop(objResults)\r\n        }\r\n      }\r\n\r\n    // no keys\r\n    } else {\r\n      for(var i = 0; i < targetsLen; ++i) { var target = targets[i]\r\n        if(!target) continue\r\n        if(!isObj(target)) target = getPrepared(target)\r\n\r\n        if((searchBitflags & target._bitflags) !== searchBitflags) continue\r\n        var result = algorithm(preparedSearch, target)\r\n        if(result === NULL) continue\r\n        if(result.score < threshold) continue\r\n        if(resultsLen < limit) { q.add(result); ++resultsLen }\r\n        else {\r\n          ++limitedCount\r\n          if(result.score > q.peek().score) q.replaceTop(result)\r\n        }\r\n      }\r\n    }\r\n\r\n    if(resultsLen === 0) return noResults\r\n    var results = new Array(resultsLen)\r\n    for(var i = resultsLen - 1; i >= 0; --i) results[i] = q.poll()\r\n    results.total = resultsLen + limitedCount\r\n    return results\r\n  }\r\n\r\n\r\n  var highlight = (result, hOpen, hClose) => {\r\n    if(typeof hOpen === 'function') return highlightCallback(result, hOpen)\r\n    if(result === NULL) return NULL\r\n    if(hOpen === undefined) hOpen = '<b>'\r\n    if(hClose === undefined) hClose = '</b>'\r\n    var highlighted = ''\r\n    var matchesIndex = 0\r\n    var opened = false\r\n    var target = result.target\r\n    var targetLen = target.length\r\n    var indexes = result._indexes\r\n    indexes = indexes.slice(0, indexes.len).sort((a,b)=>a-b)\r\n    for(var i = 0; i < targetLen; ++i) { var char = target[i]\r\n      if(indexes[matchesIndex] === i) {\r\n        ++matchesIndex\r\n        if(!opened) { opened = true\r\n          highlighted += hOpen\r\n        }\r\n\r\n        if(matchesIndex === indexes.length) {\r\n          highlighted += char + hClose + target.substr(i+1)\r\n          break\r\n        }\r\n      } else {\r\n        if(opened) { opened = false\r\n          highlighted += hClose\r\n        }\r\n      }\r\n      highlighted += char\r\n    }\r\n\r\n    return highlighted\r\n  }\r\n  var highlightCallback = (result, cb) => {\r\n    if(result === NULL) return NULL\r\n    var target = result.target\r\n    var targetLen = target.length\r\n    var indexes = result._indexes\r\n    indexes = indexes.slice(0, indexes.len).sort((a,b)=>a-b)\r\n    var highlighted = ''\r\n    var matchI = 0\r\n    var indexesI = 0\r\n    var opened = false\r\n    var result = []\r\n    for(var i = 0; i < targetLen; ++i) { var char = target[i]\r\n      if(indexes[indexesI] === i) {\r\n        ++indexesI\r\n        if(!opened) { opened = true\r\n          result.push(highlighted); highlighted = ''\r\n        }\r\n\r\n        if(indexesI === indexes.length) {\r\n          highlighted += char\r\n          result.push(cb(highlighted, matchI++)); highlighted = ''\r\n          result.push(target.substr(i+1))\r\n          break\r\n        }\r\n      } else {\r\n        if(opened) { opened = false\r\n          result.push(cb(highlighted, matchI++)); highlighted = ''\r\n        }\r\n      }\r\n      highlighted += char\r\n    }\r\n    return result\r\n  }\r\n\r\n\r\n  var indexes = result => result._indexes.slice(0, result._indexes.len).sort((a,b)=>a-b)\r\n\r\n\r\n  var prepare = (target) => {\r\n    if(typeof target !== 'string') target = ''\r\n    var info = prepareLowerInfo(target)\r\n    return {'target':target, _targetLower:info._lower, _targetLowerCodes:info.lowerCodes, _nextBeginningIndexes:NULL, _bitflags:info.bitflags, 'score':NULL, _indexes:[0], 'obj':NULL} // hidden\r\n  }\r\n\r\n\r\n  // Below this point is only internal code\r\n  // Below this point is only internal code\r\n  // Below this point is only internal code\r\n  // Below this point is only internal code\r\n\r\n\r\n  var prepareSearch = (search) => {\r\n    if(typeof search !== 'string') search = ''\r\n    search = search.trim()\r\n    var info = prepareLowerInfo(search)\r\n\r\n    var spaceSearches = []\r\n    if(info.containsSpace) {\r\n      var searches = search.split(/\\s+/)\r\n      searches = [...new Set(searches)] // distinct\r\n      for(var i=0; i<searches.length; i++) {\r\n        if(searches[i] === '') continue\r\n        var _info = prepareLowerInfo(searches[i])\r\n        spaceSearches.push({lowerCodes:_info.lowerCodes, _lower:searches[i].toLowerCase(), containsSpace:false})\r\n      }\r\n    }\r\n\r\n    return {lowerCodes: info.lowerCodes, bitflags: info.bitflags, containsSpace: info.containsSpace, _lower: info._lower, spaceSearches: spaceSearches}\r\n  }\r\n\r\n\r\n\r\n  var getPrepared = (target) => {\r\n    if(target.length > 999) return prepare(target) // don't cache huge targets\r\n    var targetPrepared = preparedCache.get(target)\r\n    if(targetPrepared !== undefined) return targetPrepared\r\n    targetPrepared = prepare(target)\r\n    preparedCache.set(target, targetPrepared)\r\n    return targetPrepared\r\n  }\r\n  var getPreparedSearch = (search) => {\r\n    if(search.length > 999) return prepareSearch(search) // don't cache huge searches\r\n    var searchPrepared = preparedSearchCache.get(search)\r\n    if(searchPrepared !== undefined) return searchPrepared\r\n    searchPrepared = prepareSearch(search)\r\n    preparedSearchCache.set(search, searchPrepared)\r\n    return searchPrepared\r\n  }\r\n\r\n\r\n  var all = (search, targets, options) => {\r\n    var results = []; results.total = targets.length\r\n\r\n    var limit = options && options.limit || INT_MAX\r\n\r\n    if(options && options.key) {\r\n      for(var i=0;i<targets.length;i++) { var obj = targets[i]\r\n        var target = getValue(obj, options.key)\r\n        if(!target) continue\r\n        if(!isObj(target)) target = getPrepared(target)\r\n        target.score = INT_MIN\r\n        target._indexes.len = 0\r\n        var result = target\r\n        result = {target:result.target, _targetLower:'', _targetLowerCodes:NULL, _nextBeginningIndexes:NULL, _bitflags:0, score:target.score, _indexes:NULL, obj:obj} // hidden\r\n        results.push(result); if(results.length >= limit) return results\r\n      }\r\n    } else if(options && options.keys) {\r\n      for(var i=0;i<targets.length;i++) { var obj = targets[i]\r\n        var objResults = new Array(options.keys.length)\r\n        for (var keyI = options.keys.length - 1; keyI >= 0; --keyI) {\r\n          var target = getValue(obj, options.keys[keyI])\r\n          if(!target) { objResults[keyI] = NULL; continue }\r\n          if(!isObj(target)) target = getPrepared(target)\r\n          target.score = INT_MIN\r\n          target._indexes.len = 0\r\n          objResults[keyI] = target\r\n        }\r\n        objResults.obj = obj\r\n        objResults.score = INT_MIN\r\n        results.push(objResults); if(results.length >= limit) return results\r\n      }\r\n    } else {\r\n      for(var i=0;i<targets.length;i++) { var target = targets[i]\r\n        if(!target) continue\r\n        if(!isObj(target)) target = getPrepared(target)\r\n        target.score = INT_MIN\r\n        target._indexes.len = 0\r\n        results.push(target); if(results.length >= limit) return results\r\n      }\r\n    }\r\n\r\n    return results\r\n  }\r\n\r\n\r\n  var algorithm = (preparedSearch, prepared, allowSpaces=false) => {\r\n    if(allowSpaces===false && preparedSearch.containsSpace) return algorithmSpaces(preparedSearch, prepared)\r\n\r\n    var searchLower = preparedSearch._lower\r\n    var searchLowerCodes = preparedSearch.lowerCodes\r\n    var searchLowerCode = searchLowerCodes[0]\r\n    var targetLowerCodes = prepared._targetLowerCodes\r\n    var searchLen = searchLowerCodes.length\r\n    var targetLen = targetLowerCodes.length\r\n    var searchI = 0 // where we at\r\n    var targetI = 0 // where you at\r\n    var matchesSimpleLen = 0\r\n\r\n    // very basic fuzzy match; to remove non-matching targets ASAP!\r\n    // walk through target. find sequential matches.\r\n    // if all chars aren't found then exit\r\n    for(;;) {\r\n      var isMatch = searchLowerCode === targetLowerCodes[targetI]\r\n      if(isMatch) {\r\n        matchesSimple[matchesSimpleLen++] = targetI\r\n        ++searchI; if(searchI === searchLen) break\r\n        searchLowerCode = searchLowerCodes[searchI]\r\n      }\r\n      ++targetI; if(targetI >= targetLen) return NULL // Failed to find searchI\r\n    }\r\n\r\n    var searchI = 0\r\n    var successStrict = false\r\n    var matchesStrictLen = 0\r\n\r\n    var nextBeginningIndexes = prepared._nextBeginningIndexes\r\n    if(nextBeginningIndexes === NULL) nextBeginningIndexes = prepared._nextBeginningIndexes = prepareNextBeginningIndexes(prepared.target)\r\n    var firstPossibleI = targetI = matchesSimple[0]===0 ? 0 : nextBeginningIndexes[matchesSimple[0]-1]\r\n\r\n    // Our target string successfully matched all characters in sequence!\r\n    // Let's try a more advanced and strict test to improve the score\r\n    // only count it as a match if it's consecutive or a beginning character!\r\n    var backtrackCount = 0\r\n    if(targetI !== targetLen) for(;;) {\r\n      if(targetI >= targetLen) {\r\n        // We failed to find a good spot for this search char, go back to the previous search char and force it forward\r\n        if(searchI <= 0) break // We failed to push chars forward for a better match\r\n\r\n        ++backtrackCount; if(backtrackCount > 200) break // exponential backtracking is taking too long, just give up and return a bad match\r\n\r\n        --searchI\r\n        var lastMatch = matchesStrict[--matchesStrictLen]\r\n        targetI = nextBeginningIndexes[lastMatch]\r\n\r\n      } else {\r\n        var isMatch = searchLowerCodes[searchI] === targetLowerCodes[targetI]\r\n        if(isMatch) {\r\n          matchesStrict[matchesStrictLen++] = targetI\r\n          ++searchI; if(searchI === searchLen) { successStrict = true; break }\r\n          ++targetI\r\n        } else {\r\n          targetI = nextBeginningIndexes[targetI]\r\n        }\r\n      }\r\n    }\r\n\r\n    // check if it's a substring match\r\n    var substringIndex = prepared._targetLower.indexOf(searchLower, matchesSimple[0]) // perf: this is slow\r\n    var isSubstring = ~substringIndex\r\n    if(isSubstring && !successStrict) { // rewrite the indexes from basic to the substring\r\n      for(var i=0; i<matchesSimpleLen; ++i) matchesSimple[i] = substringIndex+i\r\n    }\r\n    var isSubstringBeginning = false\r\n    if(isSubstring) {\r\n      isSubstringBeginning = prepared._nextBeginningIndexes[substringIndex-1] === substringIndex\r\n    }\r\n\r\n    { // tally up the score & keep track of matches for highlighting later\r\n      if(successStrict) { var matchesBest = matchesStrict; var matchesBestLen = matchesStrictLen }\r\n      else { var matchesBest = matchesSimple; var matchesBestLen = matchesSimpleLen }\r\n\r\n      var score = 0\r\n\r\n      var extraMatchGroupCount = 0\r\n      for(var i = 1; i < searchLen; ++i) {\r\n        if(matchesBest[i] - matchesBest[i-1] !== 1) {score -= matchesBest[i]; ++extraMatchGroupCount}\r\n      }\r\n      var unmatchedDistance = matchesBest[searchLen-1] - matchesBest[0] - (searchLen-1)\r\n\r\n      score -= (12+unmatchedDistance) * extraMatchGroupCount // penality for more groups\r\n\r\n      if(matchesBest[0] !== 0) score -= matchesBest[0]*matchesBest[0]*.2 // penality for not starting near the beginning\r\n\r\n      if(!successStrict) {\r\n        score *= 1000\r\n      } else {\r\n        // successStrict on a target with too many beginning indexes loses points for being a bad target\r\n        var uniqueBeginningIndexes = 1\r\n        for(var i = nextBeginningIndexes[0]; i < targetLen; i=nextBeginningIndexes[i]) ++uniqueBeginningIndexes\r\n\r\n        if(uniqueBeginningIndexes > 24) score *= (uniqueBeginningIndexes-24)*10 // quite arbitrary numbers here ...\r\n      }\r\n\r\n      if(isSubstring)          score /= 1+searchLen*searchLen*1 // bonus for being a full substring\r\n      if(isSubstringBeginning) score /= 1+searchLen*searchLen*1 // bonus for substring starting on a beginningIndex\r\n\r\n      score -= targetLen - searchLen // penality for longer targets\r\n      prepared.score = score\r\n\r\n      for(var i = 0; i < matchesBestLen; ++i) prepared._indexes[i] = matchesBest[i]\r\n      prepared._indexes.len = matchesBestLen\r\n\r\n      return prepared\r\n    }\r\n  }\r\n  var algorithmSpaces = (preparedSearch, target) => {\r\n    var seen_indexes = new Set()\r\n    var score = 0\r\n    var result = NULL\r\n\r\n    var first_seen_index_last_search = 0\r\n    var searches = preparedSearch.spaceSearches\r\n    for(var i=0; i<searches.length; ++i) {\r\n      var search = searches[i]\r\n\r\n      result = algorithm(search, target)\r\n      if(result === NULL) return NULL\r\n\r\n      score += result.score\r\n\r\n      // dock points based on order otherwise \"c man\" returns Manifest.cpp instead of CheatManager.h\r\n      if(result._indexes[0] < first_seen_index_last_search) {\r\n        score -= first_seen_index_last_search - result._indexes[0]\r\n      }\r\n      first_seen_index_last_search = result._indexes[0]\r\n\r\n      for(var j=0; j<result._indexes.len; ++j) seen_indexes.add(result._indexes[j])\r\n    }\r\n\r\n    // allows a search with spaces that's an exact substring to score well\r\n    var allowSpacesResult = algorithm(preparedSearch, target, /*allowSpaces=*/true)\r\n    if(allowSpacesResult !== NULL && allowSpacesResult.score > score) {\r\n      return allowSpacesResult\r\n    }\r\n\r\n    result.score = score\r\n\r\n    var i = 0\r\n    for (let index of seen_indexes) result._indexes[i++] = index\r\n    result._indexes.len = i\r\n\r\n    return result\r\n  }\r\n\r\n\r\n  var prepareLowerInfo = (str) => {\r\n    var strLen = str.length\r\n    var lower = str.toLowerCase()\r\n    var lowerCodes = [] // new Array(strLen)    sparse array is too slow\r\n    var bitflags = 0\r\n    var containsSpace = false // space isn't stored in bitflags because of how searching with a space works\r\n\r\n    for(var i = 0; i < strLen; ++i) {\r\n      var lowerCode = lowerCodes[i] = lower.charCodeAt(i)\r\n\r\n      if(lowerCode === 32) {\r\n        containsSpace = true\r\n        continue // it's important that we don't set any bitflags for space\r\n      }\r\n\r\n      var bit = lowerCode>=97&&lowerCode<=122 ? lowerCode-97 // alphabet\r\n              : lowerCode>=48&&lowerCode<=57  ? 26           // numbers\r\n                                                             // 3 bits available\r\n              : lowerCode<=127                ? 30           // other ascii\r\n              :                                 31           // other utf8\r\n      bitflags |= 1<<bit\r\n    }\r\n\r\n    return {lowerCodes:lowerCodes, bitflags:bitflags, containsSpace:containsSpace, _lower:lower}\r\n  }\r\n  var prepareBeginningIndexes = (target) => {\r\n    var targetLen = target.length\r\n    var beginningIndexes = []; var beginningIndexesLen = 0\r\n    var wasUpper = false\r\n    var wasAlphanum = false\r\n    for(var i = 0; i < targetLen; ++i) {\r\n      var targetCode = target.charCodeAt(i)\r\n      var isUpper = targetCode>=65&&targetCode<=90\r\n      var isAlphanum = isUpper || targetCode>=97&&targetCode<=122 || targetCode>=48&&targetCode<=57\r\n      var isBeginning = isUpper && !wasUpper || !wasAlphanum || !isAlphanum\r\n      wasUpper = isUpper\r\n      wasAlphanum = isAlphanum\r\n      if(isBeginning) beginningIndexes[beginningIndexesLen++] = i\r\n    }\r\n    return beginningIndexes\r\n  }\r\n  var prepareNextBeginningIndexes = (target) => {\r\n    var targetLen = target.length\r\n    var beginningIndexes = prepareBeginningIndexes(target)\r\n    var nextBeginningIndexes = [] // new Array(targetLen)     sparse array is too slow\r\n    var lastIsBeginning = beginningIndexes[0]\r\n    var lastIsBeginningI = 0\r\n    for(var i = 0; i < targetLen; ++i) {\r\n      if(lastIsBeginning > i) {\r\n        nextBeginningIndexes[i] = lastIsBeginning\r\n      } else {\r\n        lastIsBeginning = beginningIndexes[++lastIsBeginningI]\r\n        nextBeginningIndexes[i] = lastIsBeginning===undefined ? targetLen : lastIsBeginning\r\n      }\r\n    }\r\n    return nextBeginningIndexes\r\n  }\r\n\r\n\r\n  var cleanup = () => { preparedCache.clear(); preparedSearchCache.clear(); matchesSimple = []; matchesStrict = [] }\r\n\r\n  var preparedCache       = new Map()\r\n  var preparedSearchCache = new Map()\r\n  var matchesSimple = []; var matchesStrict = []\r\n\r\n\r\n  // for use with keys. just returns the maximum score\r\n  var defaultScoreFn = (a) => {\r\n    var max = INT_MIN\r\n    var len = a.length\r\n    for (var i = 0; i < len; ++i) {\r\n      var result = a[i]; if(result === NULL) continue\r\n      var score = result.score\r\n      if(score > max) max = score\r\n    }\r\n    if(max === INT_MIN) return NULL\r\n    return max\r\n  }\r\n\r\n  // prop = 'key'              2.5ms optimized for this case, seems to be about as fast as direct obj[prop]\r\n  // prop = 'key1.key2'        10ms\r\n  // prop = ['key1', 'key2']   27ms\r\n  var getValue = (obj, prop) => {\r\n    var tmp = obj[prop]; if(tmp !== undefined) return tmp\r\n    var segs = prop\r\n    if(!Array.isArray(prop)) segs = prop.split('.')\r\n    var len = segs.length\r\n    var i = -1\r\n    while (obj && (++i < len)) obj = obj[segs[i]]\r\n    return obj\r\n  }\r\n\r\n  var isObj = (x) => { return typeof x === 'object' } // faster as a function\r\n  // var INT_MAX = 9007199254740991; var INT_MIN = -INT_MAX\r\n  var INT_MAX = Infinity; var INT_MIN = -INT_MAX\r\n  var noResults = []; noResults.total = 0\r\n  var NULL = null\r\n\r\n\r\n  // Hacked version of https://github.com/lemire/FastPriorityQueue.js\r\n  var fastpriorityqueue=r=>{var e=[],o=0,a={},v=r=>{for(var a=0,v=e[a],c=1;c<o;){var s=c+1;a=c,s<o&&e[s].score<e[c].score&&(a=s),e[a-1>>1]=e[a],c=1+(a<<1)}for(var f=a-1>>1;a>0&&v.score<e[f].score;f=(a=f)-1>>1)e[a]=e[f];e[a]=v};return a.add=(r=>{var a=o;e[o++]=r;for(var v=a-1>>1;a>0&&r.score<e[v].score;v=(a=v)-1>>1)e[a]=e[v];e[a]=r}),a.poll=(r=>{if(0!==o){var a=e[0];return e[0]=e[--o],v(),a}}),a.peek=(r=>{if(0!==o)return e[0]}),a.replaceTop=(r=>{e[0]=r,v()}),a}\r\n  var q = fastpriorityqueue() // reuse this\r\n\r\n\r\n  // fuzzysort is written this way for minification. all names are mangeled unless quoted\r\n  return {'single':single, 'go':go, 'highlight':highlight, 'prepare':prepare, 'indexes':indexes, 'cleanup':cleanup}\r\n}) // UMD\r\n\r\n// TODO: (feature) frecency\r\n// TODO: (perf) use different sorting algo depending on the # of results?\r\n// TODO: (perf) preparedCache is a memory leak\r\n// TODO: (like sublime) backslash === forwardslash\r\n// TODO: (perf) prepareSearch seems slow\r\n"],
  "mappings": "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",
  "names": ["indexes", "r", "a", "v"]
}
